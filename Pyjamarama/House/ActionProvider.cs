
using System.Collections.Generic;
using Builder;

namespace Pyjamarama.House
{
    /// <summary>
    /// Provider for the original Pyjamarama  room action data.
    /// </summary>
    internal class ActionProvider : IActionProvider, IBuildable
    {
        
        #region Private Types

        private class ActionDummy : IAction
        {
            public ActionDummy()
            {
            }

            int IAction.DataSize
            {
                get
                {
                    return 0;
                }
            }

            bool IAction.Invoke(IList<byte> data)
            {
                return false;
            }

            bool Update()
            {
                return true;
            }
        }

        private class TestDummy : ITest
        {
            public TestDummy(int size)
            {
                TestDataSize = size;
            }

            public int TestDataSize { get; }

            bool ITest.Test(IList<byte> data)
            {
                return false;
            }
        }
        #endregion

        #region Members

        private List<ITest> testList = new List<ITest>();
        private List<IAction> actionList = new List<IAction>();
        private Queue<IUpdate> actionQueue = new Queue<IUpdate>();

        #endregion


        #region Construction
        public ActionProvider()
        {
            Initialise();
        }

        private void Initialise()
        {
            // Register all the action test methods.
            // Order is important.
            // TODO - Use names instead of indicies
            // when data is XML.
            RegisterTest(new TestPosition());
            RegisterTest(new TestPickupPosition());
            RegisterTest(new TestCarrying());
            RegisterTest(new TestDummy(0)); //new TestFuelCanFull());
            RegisterTest(new TestDummy(0)); //new TestLiftOn());
            RegisterTest(new TestDummy(1)); //new TestLiftLocation());
            RegisterTest(new TestDummy(0)); //new TestLiftOff());
            RegisterTest(new TestDummy(0)); //new TestHelpOff());
            RegisterTest(new TestBoxingGlove());

            // Same here for actions.
            RegisterAction(new ActionDummy()); //new ActionSwapObject());     // 0x00
            RegisterAction(new ActionPickUp());         // 0x01
            RegisterAction(new ActionEnterRoom());      // 0x02
            RegisterAction(new ActionDummy()); //new ActionFillBucket());     // 0x03
            RegisterAction(new ActionDummy()); //new ActionChargeLaser());    // 0x04
            RegisterAction(new ActionDummy()); //new ActionEmptyLaser());     // 0x05
            RegisterAction(new ActionDummy()); //new ActionEmptyBucket());    // 0x06
            RegisterAction(new ActionDummy()); //new ActionFillFuelCan());    // 0x07
            RegisterAction(new ActionDummy()); //new ActionEmptyFuelCan());   // 0x08
            RegisterAction(new ActionDummy()); //new ActionLiftOn());         // 0x09
            RegisterAction(new ActionDummy()); //new ActionMoveLift());       // 0x0A
            RegisterAction(new ActionDummy()); //new ActionLiftCountdown());  // 0x0B
            RegisterAction(new ActionDummy()); //new ActionLiftLight());      // 0x0C
            RegisterAction(new ActionDummy()); //new ActionOpenMagLock());    // 0x0D
            RegisterAction(new ActionDummy()); //new ActionHelpOn());         // 0x0E
            RegisterAction(new ActionDummy()); //new ActionHelpOff());        // 0x0F
            RegisterAction(new ActionDummy()); //new ActionRocket(true));     // 0x10
            RegisterAction(new ActionDummy()); //new ActionRocket(false));    // 0x11
            RegisterAction(new ActionDummy()); //new ActionGrabRope());       // 0x12
            RegisterAction(new ActionDummy()); //new ActionEnterArcade());    // 0x13
            RegisterAction(new ActionDummy()); //new ActionWin());            // 0x14
            RegisterAction(new ActionDummy()); //new ActionLeaveArcade());    // 0x15
        }

        internal void RegisterTest(ITest actionTest)
        {
            testList.Add(actionTest);
        }
        
        internal void RegisterAction(IAction action)
        {
            actionList.Add(action);
        }

        #endregion 

        #region Properties

        /// <summary>
        /// Gets a collection of bytes that describes an action.
        /// </summary>
        /// <param name="room">WHich action is required.</param>
        /// <returns>IEnuerable collection of action data bytes.</returns>
        /// <exception cref="ArgumentOutOfRangeException">If index is out of range from available data.</exception>
        IReadOnlyList<byte> IActionProvider.RoomActionData(int room)
        {
            if(room <0 || room > _actions.Count)
            {
                throw new ArgumentOutOfRangeException("$Index ({index}) is out of range.");
            }

            return _actions[room];
        }

        IReadOnlyList<ITest> IActionProvider.Tests => testList;
        IReadOnlyList<IAction> IActionProvider.Actions => actionList;

        #endregion

        #region IBuildable

        IList<IBuildable>? IBuildable.CreateBuildables()
        {
            List<IBuildable>? buildables = new List<IBuildable>();

            foreach(ITest test in testList)
            {
                if(test is IBuildable buildable)
                {
                    buildables.Add(buildable);
                }
            }

            foreach(IAction action in actionList)
            {
                if(action is IBuildable buildable)
                {
                    buildables.Add(buildable);
                }
            }

            return buildables;
        }

        void IBuildable.RegisterObjects(IDependencyPool dependencies)
        {
        }

        void IBuildable.AskForDependents(IRequests requests)
        {
        }

        void IBuildable.DependentsMet(IDependencies dependencies)
        {
        }

        void IBuildable.EndBuild()
        {
        }

        #endregion

        #region Test Indicies

        const int TestPosition = 0;
        const int TestSlotPosition = 1;
        const int TestCarrying = 2;
        const int TestFuel = 3;
        const int TestLiftOn = 4;
        const int TestLiftPos = 5;
        const int TestLiftOff = 6;
        const int TestHelpOff = 7;
        const int TestBoxingGlove = 8;

        const int ActionPickup = 1;
        const int ActionEnterRoom = 2;

        #endregion

        #region Hard Code Actions
        // Hard coded action strings from original game.
        static List<List<byte>> _actions = new List<List<byte>>()
        {
            // Item 1
            new List<byte>  { 
                0x01, 0x3a, 0x88, 0xfd, 0x01, 0xfe, 
                0x00, 0x08, 0xa0, 0xfd, 
                0x02, 0x11, 0xe8, 0x98, 0xfe, 0xff },
            // Item 2
            new List<byte> { 
                TestSlotPosition, 0x48, 0x98, ActionController.CmdThen, 
                    ActionPickup, ActionController.CmdEndIf,
                TestPosition, 0xc8, 0x88, ActionController.CmdThen, 
                    ActionEnterRoom, 0x02, 0x08, 0x98, ActionController.CmdEndIf, 
                TestPosition, 0x00, 0x48, ActionController.CmdThen, 
                    ActionEnterRoom, 0x05, 0xd8, 0x98, ActionController.CmdEndIf, 
                TestPosition, 0xe8, 0x88, TestBoxingGlove, ActionController.CmdThen, 
                    ActionEnterRoom, 0x03, 0x2e, 0x98, ActionController.CmdEndIf, 
                ActionController.CmdEndOfString },
            // Item 3
            new List<byte> { 
                TestSlotPosition, 0x98, 0x98, 
                TestCarrying, 0x0b, ActionController.CmdThen, 
                    ActionPickup, ActionController.CmdEndIf, 
                0x00, 0x08, 0x88, 0xfd, 0x02, 0x01, 0xc8, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0xfd, 0x02, 0x04, 0x08, 0x98, 0xfe, 0x00, 0x38, 0x88, 0xfd, 0x02, 0x03, 0xe8, 0x98, 0xfe, 0xff },
            // Item 4
            new List<byte> { 0x01, 0xcc, 0x70, 0xfd, 0x01, 0xfe, 0x00, 0xe8, 0x88, 0x08, 0xfd, 0x02, 0x02, 0x38, 0x98, 0xfe, 0x00, 0x30, 0x88, 0xfd, 0x02, 0x01, 0xe8, 0x98, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x06, 0x08, 0x98, 0xfe, 0xff },
            // Item 5
            new List<byte> { 0x01, 0x78, 0x98, 0xfd, 0x01, 0xfe, 0x00, 0x78, 0x88, 0x06, 0xfd, 0x09, 0xfe, 0x00, 0xe8, 0x98, 0xfd, 0x02, 0x09, 0xe8, 0x98, 0xfe, 0x00, 0x08, 0x88, 0x02, 0x03, 0xfd, 0x02, 0x02, 0xe8, 0x98, 0xfe, 0xff },
            // Item 6
            new List<byte> { 0x01, 0x68, 0x98, 0xfd, 0x01, 0xfe, 0x00, 0xe8, 0x98, 0xfd, 0x02, 0x01, 0x10, 0x48, 0xfe, 0x00, 0x28, 0x88, 0x02, 0x14, 0xfd, 0x02, 0x0c, 0x20, 0x98, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x0a, 0xe8, 0x98, 0xfe, 0xff },
            // Item 7
            new List<byte> { 0x01, 0x78, 0x98, 0xfd, 0x01, 0xfe, 0x00, 0x28, 0x98, 0x02, 0x10, 0xfd, 0x06, 0xfe, 0x00, 0x08, 0x88, 0x02, 0x10, 0xfd, 0x06, 0xfe, 0x00, 0xe8, 0x98, 0x02, 0x10, 0xfd, 0x06, 0xfe, 0x00, 0x28, 0x98, 0xfd, 0x02, 0x09, 0x08, 0x98, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x03, 0x08, 0x98, 0xfe, 0x00, 0xe8, 0x98, 0xfd, 0x02, 0x07, 0x10, 0x48, 0xfe, 0xff },
            // Item 8
            new List<byte> { 0x01, 0x60, 0x98, 0xfd, 0x01, 0xfe, 0x00, 0x00, 0x48, 0xfd, 0x02, 0x06, 0xde, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0x08, 0x04, 0xfd, 0x02, 0x08, 0xe8, 0x98, 0x0c, 0x02, 0xfe, 0x00, 0xc2, 0x98, 0x02, 0x08, 0x03, 0xfd, 0x10, 0x02, 0x19, 0x30, 0x88, 0xfe, 0xff },
            // Item 9
            new List<byte> { 0x01, 0x08, 0x80, 0x02, 0x0e, 0xfd, 0x00, 0x0e, 0xfe, 0x00, 0x3d, 0x88, 0xfd, 0x0a, 0x03, 0x0c, 0x00, 0xfe, 0x00, 0x6d, 0x88, 0xfd, 0x0a, 0x01, 0x0c, 0x01, 0xfe, 0x00, 0x9d, 0x88, 0xfd, 0x0a, 0x00, 0x0c, 0x02, 0xfe, 0x00, 0xcd, 0x88, 0xfd, 0x0a, 0x02, 0x0c, 0x03, 0xfe, 0x00, 0xe8, 0x88, 0x08, 0x05, 0x03, 0xfd, 0x0b, 0x02, 0x16, 0x08, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0x05, 0x02, 0xfd, 0x0b, 0x02, 0x10, 0x08, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0x05, 0x01, 0xfd, 0x0b, 0x02, 0x0f, 0x08, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0x05, 0x00, 0xfd, 0x0b, 0x02, 0x07, 0xe8, 0x98, 0xfe, 0xff },
            // Item 10
            new List<byte> { 0x01, 0xc8, 0x28, 0xfd, 0x01, 0xfe, 0x00, 0x70, 0x98, 0xfd, 0x0f, 0x02, 0x0e, 0x60, 0x98, 0xfe, 0xff },
            // Item 11
            new List<byte> { 0x01, 0x86, 0x68, 0xfd, 0x01, 0xfe, 0x00, 0x50, 0x88, 0x02, 0x02, 0xfd, 0x02, 0x0b, 0x08, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0x08, 0xfd, 0x02, 0x05, 0x08, 0x98, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x0d, 0xe8, 0x98, 0xfe, 0xff },
            // Item 12
            new List<byte> { 0x01, 0x48, 0x98, 0xfd, 0x01, 0xfe, 0x02, 0x0d, 0x02, 0x1d, 0xfd, 0x04, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x0a, 0x50, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0xfd, 0x02, 0x0c, 0x20, 0x98, 0xfe, 0xff },
            // Item 13
            new List<byte> { 0x01, 0xb0, 0x98, 0xfd, 0x01, 0xfe, 0x00, 0x20, 0x88, 0xfd, 0x02, 0x05, 0x28, 0x98, 0xfe, 0xff },
            // Item 14
            new List<byte> { 0x01, 0xc0, 0x78, 0x02, 0x1a, 0xfd, 0x00, 0x1a, 0xfe, 0x00, 0xe8, 0x88, 0xfd, 0x02, 0x0a, 0x08, 0x98, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x0e, 0xe8, 0x98, 0xfe, 0x00, 0x00, 0x48, 0xfd, 0x02, 0x10, 0xd4, 0x98, 0xfe, 0xff },
            // Item 15
            new List<byte> { 0x01, 0x8c, 0x68, 0xfd, 0x01, 0xfe, 0x00, 0xe8, 0x88, 0xfd, 0x02, 0x0d, 0x08, 0x98, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x0f, 0xe8, 0x98, 0xfe, 0xff },
            // Item 16
            new List<byte> { 0x01, 0x90, 0x70, 0x02, 0x13, 0xfd, 0x00, 0x13, 0xfe, 0x00, 0xe8, 0x88, 0x08, 0xfd, 0x02, 0x0e, 0x08, 0x98, 0xfe, 0x00, 0x08, 0x88, 0x04, 0xfd, 0x02, 0x08, 0xe8, 0x98, 0x0c, 0x01, 0xfe, 0xff },
            // Item 17
            new List<byte> { 0x01, 0x32, 0x80, 0xfd, 0x01, 0xfe, 0x00, 0xe8, 0x98, 0xfd, 0x02, 0x0d, 0x10, 0x48, 0xfe, 0x00, 0x08, 0x88, 0x04, 0xfd, 0x02, 0x08, 0xe8, 0x98, 0x0c, 0x03, 0xfe, 0x00, 0x68, 0x88, 0xfd, 0x02, 0x11, 0xe8, 0x98, 0xfe, 0x01, 0xc0, 0x88, 0xfd, 0x12, 0xfe, 0xff },
            // Item 18
            new List<byte> { 0x01, 0x74, 0x70, 0x02, 0x0c, 0xfd, 0x00, 0x0c, 0xfe, 0x00, 0xe8, 0x88, 0x08, 0xfd, 0x02, 0x10, 0x68, 0x98, 0xfe, 0x00, 0xb1, 0x88, 0xfd, 0x02, 0x12, 0x08, 0x98, 0xfe, 0xff },
            // Item 19
            new List<byte> { 0x01, 0xc0, 0x80, 0x02, 0x05, 0xfd, 0x00, 0x05, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x11, 0xb1, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0xfd, 0x02, 0x13, 0x08, 0x98, 0xfe, 0x00, 0x78, 0x60, 0x07, 0xfd, 0x0e, 0xfe, 0xff },
            // Item 20
            new List<byte> { 0x01, 0x78, 0x98, 0xfd, 0x01, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x12, 0xe8, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0xfd, 0x02, 0x14, 0xb9, 0x98, 0xfe, 0x02, 0x10, 0x01, 0x58, 0x98, 0xfd, 0x03, 0xfe, 0xff },
            // Item 21
            new List<byte> { 0x01, 0x38, 0x98, 0xfd, 0x01, 0xfe, 0x01, 0x8a, 0x98, 0x02, 0x1f, 0xfd, 0x14, 0xfe, 0x00, 0xb9, 0x88, 0xfd, 0x02, 0x13, 0xe8, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0x08, 0xfd, 0x02, 0x15, 0x08, 0x98, 0xfe, 0xff },
            // Item 22
            new List<byte> { 0x01, 0x60, 0x98, 0xfd, 0x01, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x14, 0xe8, 0x98, 0xfe, 0x00, 0xd4, 0x88, 0xfd, 0x13, 0xfe, 0xff },
            // Item 23
            new List<byte> { 0x01, 0xde, 0x98, 0xfd, 0x01, 0xfe, 0x00, 0x08, 0x88, 0x04, 0xfd, 0x02, 0x08, 0xe8, 0x98, 0x0c, 0x00, 0xfe, 0x00, 0xe8, 0x88, 0xfd, 0x02, 0x17, 0x18, 0x98, 0xfe, 0x00, 0xb8, 0x88, 0xfd, 0x02, 0x1a, 0x08, 0x98, 0xfe, 0xff },
            // Item 24
            new List<byte> { 0x01, 0x78, 0x68, 0xfd, 0x01, 0xfe, 0x00, 0x18, 0x88, 0xfd, 0x02, 0x16, 0xe8, 0x98, 0xfe, 0x00, 0xb4, 0x40, 0xfd, 0x02, 0x18, 0x30, 0x68, 0xfe, 0xff },
            // Item 25
            new List<byte> { 0x01, 0x64, 0x68, 0x02, 0x18, 0xfd, 0x00, 0x18, 0xfe, 0x00, 0x10, 0x68, 0xfd, 0x02, 0x17, 0x98, 0x50, 0xfe, 0x00, 0xe1, 0x60, 0xfd, 0x02, 0x1c, 0x80, 0x28, 0xfe, 0xff },
            // Item 26
            new List<byte> { 0x01, 0x46, 0x88, 0xfd, 0x01, 0xfe, 0x00, 0xe8, 0x78, 0xfd, 0x02, 0x1d, 0x10, 0x98, 0xfe, 0x00, 0x12, 0x88, 0x02, 0x08, 0x02, 0x0d, 0xfd, 0x05, 0xfe, 0x00, 0x12, 0x88, 0x02, 0x08, 0xfd, 0x11, 0x08, 0x02, 0x07, 0xb0, 0x98, 0xfe, 0xff },
            // Item 27
            new List<byte> { 0x01, 0x68, 0x70, 0xfd, 0x01, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x16, 0xb8, 0x98, 0xfe, 0x00, 0xe8, 0x88, 0x02, 0x09, 0xfd, 0x02, 0x1b, 0x08, 0x98, 0xfe, 0x02, 0x08, 0x01, 0x36, 0x98, 0xfd, 0x07, 0xfe, 0xff },
            // Item 28
            new List<byte> { 0x01, 0xb0, 0x70, 0xfd, 0x01, 0xfe, 0x02, 0x0d, 0x02, 0x1d, 0xfd, 0x04, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x1a, 0xe8, 0x98, 0xfe, 0x00, 0x98, 0x98, 0xfd, 0x02, 0x04, 0x32, 0x98, 0xfe, 0xff },
            // Item 29
            new List<byte> { 0x01, 0x32, 0x88, 0xfd, 0x01, 0xfe, 0x00, 0xe8, 0xa0, 0xfd, 0x02, 0x00, 0xf0, 0x28, 0xfe, 0x00, 0x00, 0x88, 0xfd, 0x02, 0x15, 0xd0, 0x98, 0xfe, 0xff },
            // Item 30
            new List<byte> { 0x01, 0xa8, 0x60, 0xfd, 0x01, 0xfe, 0x00, 0x08, 0x88, 0xfd, 0x02, 0x19, 0xe8, 0x88, 0xfe, 0x00, 0x40, 0x88, 0x02, 0x04, 0xfd, 0x0d, 0xfe, 0xff },
            // Arcade
            new List<byte> { 0x00, 0x00, 0x98, 0xFD, 0x15, 0x02, 0x15, 0xd0, 0x98, 0xfe, 0xff }
        };
        #endregion
    }
}

