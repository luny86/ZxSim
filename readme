Git repo for ZX projects.
=========================

The ZX project acts as a simulator for ease of porting Z80 Spectrum games
to C#. This is a collection of libraries which handle colours, drawing using a 
generic interface that can be plugged into a modern front-end such as Godot.

Pyjamarama has been included as an example of a game specific library and a Godot 
project.

The idea is that the libraries allow the original binary data to be used to create the
graphics, rooms etc. Any Z80 which puts these items together can then be ported into c#.
In the mean time other libraries will eventually exist to aid converting this raw info
into bitmaps and JSON for quicker use. All portable to different UI platforms.



Architect
=========

		 ------------- ------------
		|   ZX Util   |   Builder  |
		 -------------             |
		|     ZX      |            |
		 ------------- -------------
		| ZX Platform | ZX Drawing |
		 --------------------------
		| Godot project / Platform |
		 --------------------------


Setting up a new project
========================

Godot
-----

Create a new scene 'main' and make it the default.
Create a scene called 'view'
	Add a child TextureRect node and call it 'view'.

Copy folder, and its contents, ./..../Platform into the project.
Include libraries in projects makefile.

Create a script based on a Node.
Override the void _Ready() method. This will be ran at the start.
Call into you main static Initialisation code from here and any initial loading required.

Make the script run immediately using:

    Project Settings -> Globals -> Autoload

Attach the script 'View.cs' to node 'view'.

Main.cs
This should be a godot Node, IComposition and an IBuildable.
This sould be added as an autostart, where it can invoke the build functionality.
Main should instantiate the view and create the surface for it. This will be the main screen.
The composition should expose the main view (IView) as "Platform.Main.View".


Sub projects are class libraries

    dotnet new classlib -n <NAME>


Example node use
----------------

    	Node inst = _commandScene.Instantiate();
		AddChild(inst);	
		FurnitureDisplayNode view = inst.GetNode<FurnitureDisplayNode>("Panel/Window/View");

		if(view is not IView)
		{
			throw new InvalidOperationException($"Node without IView when trying to create command '{name}'");
		}

		return view;

    Where:

        . FurnitureDisplayNode is a script based on a TextureRect and IView.
        . "Panel/Window/View" is the tree path for the physical node added to the Godot scene.

The IView will then give you access to the surface which gets created in the factory.

